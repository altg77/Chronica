// <auto-generated />
using Chronica.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Chronica.Migrations
{
    [DbContext(typeof(BancoContext))]
    [Migration("20250612180908_addFinish")]
    partial class addFinish
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Chronica.Models.Campanha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemURL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Campanhas");
                });

            modelBuilder.Entity("Chronica.Models.Classe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemURL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Chronica.Models.Habilidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("HabilidadeTipoId")
                        .HasColumnType("int");

                    b.Property<string>("ImagemURL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HabilidadeTipoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Habilidades");
                });

            modelBuilder.Entity("Chronica.Models.HabilidadeTipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("HabilidadeTipos");
                });

            modelBuilder.Entity("Chronica.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemURL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ItemTipoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemTipoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Chronica.Models.Origem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemURL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Origem");
                });

            modelBuilder.Entity("Chronica.Models.Pericia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Atributo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Pericia");
                });

            modelBuilder.Entity("Chronica.Models.Personagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Agilidade")
                        .HasColumnType("int");

                    b.Property<int>("Carisma")
                        .HasColumnType("int");

                    b.Property<int?>("ClasseId")
                        .HasColumnType("int");

                    b.Property<int>("Constituicao")
                        .HasColumnType("int");

                    b.Property<int>("Defesa")
                        .HasColumnType("int");

                    b.Property<int>("Deslocamento")
                        .HasColumnType("int");

                    b.Property<int>("Espirito")
                        .HasColumnType("int");

                    b.Property<int>("Forca")
                        .HasColumnType("int");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<string>("ImagemURL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Intelecto")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("OrigemId")
                        .HasColumnType("int");

                    b.Property<int>("PontosAtributo")
                        .HasColumnType("int");

                    b.Property<string>("TipoPersonagem")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int?>("VarianteRacialId")
                        .HasColumnType("int");

                    b.Property<int>("Vida")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClasseId");

                    b.HasIndex("OrigemId");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("VarianteRacialId");

                    b.ToTable("Personagens");

                    b.HasDiscriminator<string>("TipoPersonagem").HasValue("Personagem");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Chronica.Models.PersonagemCampanha", b =>
                {
                    b.Property<int>("PersonagemId")
                        .HasColumnType("int");

                    b.Property<int>("CampanhaId")
                        .HasColumnType("int");

                    b.HasKey("PersonagemId", "CampanhaId");

                    b.HasIndex("CampanhaId");

                    b.ToTable("PersonagemCampanhas");
                });

            modelBuilder.Entity("Chronica.Models.PersonagemHabilidade", b =>
                {
                    b.Property<int>("PersonagemId")
                        .HasColumnType("int");

                    b.Property<int>("HabilidadeId")
                        .HasColumnType("int");

                    b.HasKey("PersonagemId", "HabilidadeId");

                    b.HasIndex("HabilidadeId");

                    b.ToTable("PersonagemHabilidades");
                });

            modelBuilder.Entity("Chronica.Models.PersonagemItem", b =>
                {
                    b.Property<int>("PersonagemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("PersonagemId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("PersonagemItens");
                });

            modelBuilder.Entity("Chronica.Models.PersonagemPericia", b =>
                {
                    b.Property<int>("PersonagemId")
                        .HasColumnType("int");

                    b.Property<int>("PericiaId")
                        .HasColumnType("int");

                    b.Property<string>("Nivel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PersonagemId", "PericiaId");

                    b.HasIndex("PericiaId");

                    b.ToTable("PersonagemPericias");
                });

            modelBuilder.Entity("Chronica.Models.PersonagemTipoHabilidade", b =>
                {
                    b.Property<int>("PersonagemId")
                        .HasColumnType("int");

                    b.Property<int>("HabilidadeTipoId")
                        .HasColumnType("int");

                    b.HasKey("PersonagemId", "HabilidadeTipoId");

                    b.HasIndex("HabilidadeTipoId");

                    b.ToTable("PersonagemTipoHabilidades");
                });

            modelBuilder.Entity("Chronica.Models.Relacoes.PersonagemDesvantagem", b =>
                {
                    b.Property<int>("PersonagemId")
                        .HasColumnType("int");

                    b.Property<int>("DesvantagemId")
                        .HasColumnType("int");

                    b.HasKey("PersonagemId", "DesvantagemId");

                    b.HasIndex("DesvantagemId");

                    b.ToTable("PersonagemDesvantagens");
                });

            modelBuilder.Entity("Chronica.Models.Relacoes.PersonagemVantagem", b =>
                {
                    b.Property<int>("PersonagemId")
                        .HasColumnType("int");

                    b.Property<int>("VantagemId")
                        .HasColumnType("int");

                    b.HasKey("PersonagemId", "VantagemId");

                    b.HasIndex("VantagemId");

                    b.ToTable("PersonagemVantagens");
                });

            modelBuilder.Entity("Chronica.Models.TipoAmeaca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("TiposAmeaca");
                });

            modelBuilder.Entity("Chronica.Models.Universe.Desvantagens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Desvantagens");
                });

            modelBuilder.Entity("Chronica.Models.Universe.ItemTipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ItemTipos");
                });

            modelBuilder.Entity("Chronica.Models.Universe.Vantagens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Vantagens");
                });

            modelBuilder.Entity("Chronica.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImagemURL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Patente")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Chronica.Models.UsuarioCampanha", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("CampanhaId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "CampanhaId");

                    b.HasIndex("CampanhaId");

                    b.ToTable("UsuarioCampanhas");
                });

            modelBuilder.Entity("Chronica.Models.VarianteRacial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagemURL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("VariantesRaciais");
                });

            modelBuilder.Entity("Chronica.Models.AgentesModel", b =>
                {
                    b.HasBaseType("Chronica.Models.Personagem");

                    b.Property<string>("Aparencia")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Caractere")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Historia")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Objetivos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Personalidade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Agente");
                });

            modelBuilder.Entity("Chronica.Models.AmeacasModel", b =>
                {
                    b.HasBaseType("Chronica.Models.Personagem");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Imunidade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.PrimitiveCollection<string>("Resistencia")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TipoAmeacaId")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("Vulnerabilidades")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasIndex("TipoAmeacaId");

                    b.HasDiscriminator().HasValue("Ameaca");
                });

            modelBuilder.Entity("Chronica.Models.Campanha", b =>
                {
                    b.HasOne("Chronica.Models.Usuario", "Usuario")
                        .WithMany("CampanhasCriadas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Chronica.Models.Classe", b =>
                {
                    b.HasOne("Chronica.Models.Usuario", "Usuario")
                        .WithMany("ClassesCriadas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Chronica.Models.Habilidade", b =>
                {
                    b.HasOne("Chronica.Models.HabilidadeTipo", "HabilidadeTipo")
                        .WithMany("Habilidades")
                        .HasForeignKey("HabilidadeTipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chronica.Models.Usuario", "Usuario")
                        .WithMany("HabilidadesCriadas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HabilidadeTipo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Chronica.Models.HabilidadeTipo", b =>
                {
                    b.HasOne("Chronica.Models.Usuario", "Usuario")
                        .WithMany("HabilidadeTiposCriados")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Chronica.Models.Item", b =>
                {
                    b.HasOne("Chronica.Models.Universe.ItemTipo", "ItemTipo")
                        .WithMany("Itens")
                        .HasForeignKey("ItemTipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chronica.Models.Usuario", "Usuario")
                        .WithMany("ItensCriados")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemTipo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Chronica.Models.Origem", b =>
                {
                    b.HasOne("Chronica.Models.Usuario", "Usuario")
                        .WithMany("OrigensCriadas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Chronica.Models.Pericia", b =>
                {
                    b.HasOne("Chronica.Models.Usuario", "Usuario")
                        .WithMany("PericiaTiposCriados")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Chronica.Models.Personagem", b =>
                {
                    b.HasOne("Chronica.Models.Classe", "Classe")
                        .WithMany("Personagens")
                        .HasForeignKey("ClasseId");

                    b.HasOne("Chronica.Models.Origem", "Origem")
                        .WithMany("Personagens")
                        .HasForeignKey("OrigemId");

                    b.HasOne("Chronica.Models.Usuario", "Usuario")
                        .WithMany("PersonagensCriados")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chronica.Models.VarianteRacial", "VarianteRacial")
                        .WithMany("Personagens")
                        .HasForeignKey("VarianteRacialId");

                    b.Navigation("Classe");

                    b.Navigation("Origem");

                    b.Navigation("Usuario");

                    b.Navigation("VarianteRacial");
                });

            modelBuilder.Entity("Chronica.Models.PersonagemCampanha", b =>
                {
                    b.HasOne("Chronica.Models.Campanha", "Campanha")
                        .WithMany("PersonagemCampanhas")
                        .HasForeignKey("CampanhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chronica.Models.Personagem", "Personagem")
                        .WithMany("PersonagemCampanhas")
                        .HasForeignKey("PersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campanha");

                    b.Navigation("Personagem");
                });

            modelBuilder.Entity("Chronica.Models.PersonagemHabilidade", b =>
                {
                    b.HasOne("Chronica.Models.Habilidade", "Habilidade")
                        .WithMany("PersonagemHabilidades")
                        .HasForeignKey("HabilidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chronica.Models.Personagem", "Personagem")
                        .WithMany("PersonagemHabilidades")
                        .HasForeignKey("PersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Habilidade");

                    b.Navigation("Personagem");
                });

            modelBuilder.Entity("Chronica.Models.PersonagemItem", b =>
                {
                    b.HasOne("Chronica.Models.Item", "Item")
                        .WithMany("PersonagemItens")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chronica.Models.Personagem", "Personagem")
                        .WithMany("PersonagemItens")
                        .HasForeignKey("PersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Personagem");
                });

            modelBuilder.Entity("Chronica.Models.PersonagemPericia", b =>
                {
                    b.HasOne("Chronica.Models.Pericia", "Pericia")
                        .WithMany("PersonagemPericias")
                        .HasForeignKey("PericiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chronica.Models.Personagem", "Personagem")
                        .WithMany("PersonagemPericias")
                        .HasForeignKey("PersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pericia");

                    b.Navigation("Personagem");
                });

            modelBuilder.Entity("Chronica.Models.PersonagemTipoHabilidade", b =>
                {
                    b.HasOne("Chronica.Models.HabilidadeTipo", "HabilidadeTipo")
                        .WithMany("PersonagemTipoHabilidades")
                        .HasForeignKey("HabilidadeTipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chronica.Models.Personagem", "Personagem")
                        .WithMany("PersonagemTipoHabilidades")
                        .HasForeignKey("PersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HabilidadeTipo");

                    b.Navigation("Personagem");
                });

            modelBuilder.Entity("Chronica.Models.Relacoes.PersonagemDesvantagem", b =>
                {
                    b.HasOne("Chronica.Models.Universe.Desvantagens", "Desvantagem")
                        .WithMany("PersonagemDesvantagens")
                        .HasForeignKey("DesvantagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chronica.Models.Personagem", "Personagem")
                        .WithMany("PersonagemDesvantagens")
                        .HasForeignKey("PersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Desvantagem");

                    b.Navigation("Personagem");
                });

            modelBuilder.Entity("Chronica.Models.Relacoes.PersonagemVantagem", b =>
                {
                    b.HasOne("Chronica.Models.Personagem", "Personagem")
                        .WithMany("PersonagemVantagens")
                        .HasForeignKey("PersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chronica.Models.Universe.Vantagens", "Vantagem")
                        .WithMany("PersonagemVantagens")
                        .HasForeignKey("VantagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Personagem");

                    b.Navigation("Vantagem");
                });

            modelBuilder.Entity("Chronica.Models.TipoAmeaca", b =>
                {
                    b.HasOne("Chronica.Models.Usuario", "Usuario")
                        .WithMany("TiposAmeacaCriados")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Chronica.Models.Universe.Desvantagens", b =>
                {
                    b.HasOne("Chronica.Models.Usuario", "Usuario")
                        .WithMany("DesvantagensCriadas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Chronica.Models.Universe.ItemTipo", b =>
                {
                    b.HasOne("Chronica.Models.Usuario", "Usuario")
                        .WithMany("ItemTiposCriados")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Chronica.Models.Universe.Vantagens", b =>
                {
                    b.HasOne("Chronica.Models.Usuario", "Usuario")
                        .WithMany("VantagensCriadas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Chronica.Models.UsuarioCampanha", b =>
                {
                    b.HasOne("Chronica.Models.Campanha", "Campanha")
                        .WithMany("UsuarioCampanhas")
                        .HasForeignKey("CampanhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chronica.Models.Usuario", "Usuario")
                        .WithMany("UsuarioCampanhas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campanha");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Chronica.Models.VarianteRacial", b =>
                {
                    b.HasOne("Chronica.Models.Usuario", "Usuario")
                        .WithMany("VariantesRaciaisCriadas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Chronica.Models.AmeacasModel", b =>
                {
                    b.HasOne("Chronica.Models.TipoAmeaca", "TipoAmeaca")
                        .WithMany("Ameacas")
                        .HasForeignKey("TipoAmeacaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoAmeaca");
                });

            modelBuilder.Entity("Chronica.Models.Campanha", b =>
                {
                    b.Navigation("PersonagemCampanhas");

                    b.Navigation("UsuarioCampanhas");
                });

            modelBuilder.Entity("Chronica.Models.Classe", b =>
                {
                    b.Navigation("Personagens");
                });

            modelBuilder.Entity("Chronica.Models.Habilidade", b =>
                {
                    b.Navigation("PersonagemHabilidades");
                });

            modelBuilder.Entity("Chronica.Models.HabilidadeTipo", b =>
                {
                    b.Navigation("Habilidades");

                    b.Navigation("PersonagemTipoHabilidades");
                });

            modelBuilder.Entity("Chronica.Models.Item", b =>
                {
                    b.Navigation("PersonagemItens");
                });

            modelBuilder.Entity("Chronica.Models.Origem", b =>
                {
                    b.Navigation("Personagens");
                });

            modelBuilder.Entity("Chronica.Models.Pericia", b =>
                {
                    b.Navigation("PersonagemPericias");
                });

            modelBuilder.Entity("Chronica.Models.Personagem", b =>
                {
                    b.Navigation("PersonagemCampanhas");

                    b.Navigation("PersonagemDesvantagens");

                    b.Navigation("PersonagemHabilidades");

                    b.Navigation("PersonagemItens");

                    b.Navigation("PersonagemPericias");

                    b.Navigation("PersonagemTipoHabilidades");

                    b.Navigation("PersonagemVantagens");
                });

            modelBuilder.Entity("Chronica.Models.TipoAmeaca", b =>
                {
                    b.Navigation("Ameacas");
                });

            modelBuilder.Entity("Chronica.Models.Universe.Desvantagens", b =>
                {
                    b.Navigation("PersonagemDesvantagens");
                });

            modelBuilder.Entity("Chronica.Models.Universe.ItemTipo", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("Chronica.Models.Universe.Vantagens", b =>
                {
                    b.Navigation("PersonagemVantagens");
                });

            modelBuilder.Entity("Chronica.Models.Usuario", b =>
                {
                    b.Navigation("CampanhasCriadas");

                    b.Navigation("ClassesCriadas");

                    b.Navigation("DesvantagensCriadas");

                    b.Navigation("HabilidadeTiposCriados");

                    b.Navigation("HabilidadesCriadas");

                    b.Navigation("ItemTiposCriados");

                    b.Navigation("ItensCriados");

                    b.Navigation("OrigensCriadas");

                    b.Navigation("PericiaTiposCriados");

                    b.Navigation("PersonagensCriados");

                    b.Navigation("TiposAmeacaCriados");

                    b.Navigation("UsuarioCampanhas");

                    b.Navigation("VantagensCriadas");

                    b.Navigation("VariantesRaciaisCriadas");
                });

            modelBuilder.Entity("Chronica.Models.VarianteRacial", b =>
                {
                    b.Navigation("Personagens");
                });
#pragma warning restore 612, 618
        }
    }
}
